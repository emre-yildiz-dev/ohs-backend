services:
  postgres:
    image: postgres:17.5-bookworm
    container_name: ohs_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ohs_db
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ohs_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ohs_network

  redis:
    image: redis:8.0.0-bookworm
    container_name: ohs_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ohs_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.69.0
    container_name: ohs_jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - JAEGER_DISABLED=false
    networks:
      - ohs_network

  # OpenTelemetry Collector (optional - for advanced setups)
  otel-collector:
    image: otel/opentelemetry-collector:0.92.0
    container_name: ohs_otel_collector
    restart: unless-stopped
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    volumes:
      - ./opentelemetry_config/otel-collector-config.yaml:/etc/otelcol/config.yaml
    command: ["--config=/etc/otelcol/config.yaml"]
    depends_on:
      - jaeger
    networks:
      - ohs_network
    profiles:
      - observability  # Optional service, enable with: docker-compose --profile observability up

  coturn:
    image: coturn/coturn:latest
    container_name: ohs_coturn
    restart: unless-stopped
    volumes:
      - ./coturn/turnserver.conf:/etc/coturn/turnserver.conf:ro
      - coturn-data:/var/tmp
    # Expose UDP and TCP ports for TURN/STUN
    ports:
      - "3478:3478/tcp"
      - "3478:3478/udp"
      - "49152-49200:49152-49200/udp"
    command: -c /etc/coturn/turnserver.conf -v
    environment:
      - TURN_USERNAME=turnuser
      - TURN_PASSWORD=turnpassword
    networks:
      - ohs_network

  ohs-backend:
    build:
      context: ./ # Assuming your Axum app Dockerfile is here
      dockerfile: Dockerfile
    container_name: ohs_backend
    restart: unless-stopped
    ports:
      - "8000:8000" # Assuming your Axum app runs on port 8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      # Server Configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8000
      
      # Database Configuration
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ohs_db
      DATABASE_MAX_CONNECTIONS: 10
      DATABASE_MIN_CONNECTIONS: 2
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # S3 Storage Configuration
      S3_ENDPOINT: http://garage:3900
      S3_ACCESS_KEY_ID: garage-access-key
      S3_SECRET_ACCESS_KEY: garage-secret-key
      S3_BUCKET_NAME: ohs-bucket
      
      # TURN Server Configuration
      TURN_URL_UDP: turn:coturn:3478?transport=udp
      TURN_URL_TCP: turn:coturn:3478?transport=tcp
      TURN_USERNAME: turnuser
      TURN_PASSWORD: turnpassword
      
      # Application Configuration
      APP_NAME: "OHS Backend"
      APP_ENVIRONMENT: development
      STATIC_DIR: static
      TEMPLATES_DIR: templates
      
      # OpenTelemetry Configuration
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      OTEL_SERVICE_NAME: ohs-backend
      OTEL_SERVICE_VERSION: 0.1.0
      DEPLOYMENT_ENVIRONMENT: development
      OTEL_TRACES_ENABLED: true
      OTEL_METRICS_ENABLED: true
      OTEL_LOGS_ENABLED: true
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
      OTEL_RESOURCE_ATTRIBUTES: service.name=ohs-backend,service.version=0.1.0,deployment.environment=development
      
      # Logging Configuration
      RUST_LOG: debug
    networks:
      - ohs_network

  garage:
    image: dxflrs/garage:v1.1.0
    container_name: garage
    ports:
      - "3900:3900"  # RPC
      - "3901:3901"  # S3 API
    volumes:
      - garage-data:/var/lib/garage
      - ./garage-config/garage.toml:/etc/garage.toml
    environment:
      - RUST_LOG=info
    restart: unless-stopped
    networks:
      - ohs_network

volumes:
  postgres-data:
  redis-data:
  garage-data:
  coturn-data:

networks:
  ohs_network:
    driver: bridge
